defmodule EulerProblem1 do
  @doc ~S"""
  If we list all the natural numbers below 10 that are multiples of 3 or 5,
  we get 3, 5, 6 and 9. The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 1000.
  """
  def solve do
    max_num = 1000
    sum = Enum.sum(Enum.filter(1..(max_num - 1), fn x -> rem(x, 3) == 0 || rem(x, 5) == 0 end))
    IO.puts(sum)
  end
end

defmodule EulerProblem2 do
  @doc ~S"""
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
  """
  def solve do
    max_num = 4_000_000

    fib_seq_to_max_val(max_num, [])
    |> Enum.filter(fn x -> rem(x, 2) == 0 && x < max_num end)
    |> Enum.sum()
  end

  def fib_seq_to_max_val(max_val, current_seq \\ []) do
    len_seq = length(current_seq)

    next_val =
      case len_seq do
        0 -> 0
        1 -> 1
        _ -> Enum.at(current_seq, 0) + Enum.at(current_seq, 1)
      end

    if next_val >= max_val do
      current_seq
    else
      fib_seq_to_max_val(max_val, [next_val | current_seq])
    end
  end
end

# EulerProblem_1.solve
IO.puts(EulerProblem2.solve())
