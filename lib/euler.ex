
defmodule EulerProblem1 do

    @doc ~S"""    
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    def solve do
      max_num = 1000
      sum = Enum.sum(Enum.filter(1..max_num - 1, fn(x) -> rem(x, 3) == 0 || rem(x, 5) == 0 end))
      IO.puts(sum)
    end
end


defmodule EulerProblem2 do
    @doc ~S"""
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
    """
    def solve do
      # max_num = 4000000
      # fibonacci_do(10)
      fibonacci(100) |> Enum.filter(fn(x) -> rem(x, 2) == 0 && x < 4000000 end) |> Enum.sum()
      
    end

    # def get_fibs(max_num) do
    #   # Return fibonacci sequence until values surpass provided max value.
    # end

    def fibonacci(number) do
      IO.puts("HI")
      Enum.reverse(fibonacci_do(number))
    end

    def fibonacci_do(1), do: [0]
    def fibonacci_do(2), do: [1|fibonacci_do(1)]
    def fibonacci_do(number) when number > 2 do
      [x, y|_] = all = fibonacci_do(number-1)
      [x + y|all]
    end
end


# EulerProblem_1.solve
IO.puts(EulerProblem2.solve)
